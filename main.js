!function(){"use strict";var e=class{constructor(e,t,s){let{name:r,link:i,isLiked:n,_id:o}=e,{handleCardClick:a,handleCardDelete:l,handleCardLike:d}=t;this._title=r,this._link=i,this._id=o,this.isLiked=n,this._cardTemplate=s,this._handleCardClick=a,this._handleCardDelete=l,this._handleCardLike=d}_getTemplate(){return this._cardTemplate.cloneNode(!0).querySelector(".card")}setLikeStatus(e){this.isLiked=e,this._renderLike()}_renderLike=()=>{this.isLiked?this._likeBtn.classList.add("card__like-button_active"):this._likeBtn.classList.remove("card__like-button_active")};removeCard=()=>{this._cardElement.remove(),this._cardElement=null};_setEventListeners(){this._cardImage.addEventListener("click",this._handleCardClick),this._likeBtn.addEventListener("click",(()=>{this._handleCardLike(this._id)})),this._deleteBtn.addEventListener("click",this._handleCardDelete)}getView(){return this._cardElement=this._getTemplate(),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._deleteBtn=this._cardElement.querySelector(".card__delete-button"),this._cardTitle.textContent=this._title,this._cardImage.alt=this._title,this._cardImage.src=this._link,this._renderLike(),this._setEventListeners(),this._cardElement}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleButtonState(),this.checkInputValidity(e)}))}))}enableValidation(){this._setEventListeners()}},s=class{constructor(e){let{popup:t}=e;this._popup=t}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleCloseByEsc)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleCloseByEsc)}_handleCloseByEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&this.close()}))}},r=class extends s{constructor(e,t){let{popup:s,handleFormSubmit:r}=e;super({popup:s}),this._handleFormSubmit=r,this._submitBtn=this._popup.querySelector(t.submitButtonSelector),this._submitBtnText=this._submitBtn.textContent,this._popupForm=this._popup.querySelector(t.formSelector),this._inputList=[...this._popup.querySelectorAll(t.inputSelector)]}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}resetForm(){this._popupForm.reset()}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}};const i=document.querySelector(".profile__title"),n=document.querySelector(".profile__description"),o=document.querySelector(".profile__image"),a=document.querySelector(".gallery__cards"),l=document.querySelector("#card-template").content,d=document.getElementById("edit-modal"),h=document.getElementById("new-card-modal"),u=document.getElementById("avatar-edit-modal"),c=document.getElementById("delete-confirmation-modal"),_=document.getElementById("preview-image-modal"),m=_.querySelector(".preview-image"),p=_.querySelector(".image-description"),v=document.querySelector(".profile__edit-button"),E=document.querySelector(".profile__plus-button"),b=document.querySelector(".edit__avatar-button"),L={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__confirm-button",inactiveButtonClass:"modal__confirm-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"};function g(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}const S=new class{constructor(e){let{userName:t,userDescription:s,userProfileImage:r}=e;this._userName=t,this._userDescription=s,this._userProfileImage=r}getUserInfo(){const e={};return e.name=this._userName.textContent,e.about=this._userDescription.textContent,e}setUserInfo(e){this._userName.textContent=e.name,this._userDescription.textContent=e.about}setUserProfileImage(e){this._userProfileImage.src=e.avatar,this._userProfileImage.alt=this._userName.textContent}}({userName:i,userDescription:n,userProfileImage:o}),f=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInformation(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkServerResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkServerResponse)}editProfileData(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkServerResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then(this._checkServerResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkServerResponse)}deleteLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkServerResponse)}updateProfileImage(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkServerResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9fbfab1b-69d6-43a9-b085-60d57b074309","Content-Type":"application/json"}}),k=t=>{const s=(t=>{const s=new e(t,{handleCardClick:()=>I.open(t),handleCardDelete:()=>{x.open(),x.submit((()=>{g((function(){return f.deleteCard(t._id).then((()=>{s.removeCard()}))}),x,"Deleting...")}))},handleCardLike:e=>{s.isLiked?f.deleteLike(e).then((e=>{s.setLikeStatus(e.isLiked)})).catch(console.error):f.addLike(e).then((e=>{s.setLikeStatus(e.isLiked)})).catch(console.error)}},l);return s.getView()})(t);C.setItem(s)},C=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}setItem(e){this._container.prepend(e)}}({items:[],renderer:k},a),I=new class extends s{constructor(e,t){let{popupImage:s,popupImageText:r}=e;super({popup:t}),this._popup=t,this._popupImage=s,this._popupImageText=r}open(e){super.open(),this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupImageText.textContent=e.name}}({popupImage:m,popupImageText:p},_),y=new r({popup:d,handleFormSubmit:e=>{g((function(){return f.editProfileData(e).then((e=>{S.setUserInfo(e),y.resetForm()}))}),y)}},L),B=new r({popup:h,handleFormSubmit:e=>{g((function(){return f.addNewCard(e).then((e=>{k(e),B.resetForm()}))}),B)}},L),q=new r({popup:u,handleFormSubmit:e=>{handleSubmit((function(){return f.updateProfileImage(e).then((e=>{S.setUserProfileImage(e),q.resetForm()}))}),q)}},L),x=new class extends s{constructor(e,t){let{popup:s}=e;super({popup:s}),this._submitBtn=this._popup.querySelector(t.submitButtonSelector),this._submitBtnText=this._submitBtn.textContent}submit(e){this._handleSubmit=e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}}({popup:c},L);v.addEventListener("click",(()=>{const e=S.getUserInfo();y.setInputValues(e),w["edit-form"].resetValidation(),y.open()})),E.addEventListener("click",(()=>{w["new-card-form"].resetValidation(),B.open()})),b.addEventListener("click",(()=>{w["avatar-edit-form"].resetValidation(),q.open()})),I.setEventListeners(),y.setEventListeners(),B.setEventListeners(),q.setEventListeners(),x.setEventListeners();const w={};(e=>{[...document.querySelectorAll(e.formSelector)].forEach((s=>{const r=new t(e,s),i=s.getAttribute("name");w[i]=r,r.enableValidation()}))})(L),Promise.all([f.getUserInformation(),f.getInitialCards()]).then((e=>{let[t,s]=e;S.setUserInfo(t),S.setUserProfileImage(t),s.forEach((e=>k(e)))})).catch(console.error),C.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,